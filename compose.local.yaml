# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server: &server
    restart: unless-stopped
    build:
      context: .
    env_file:
      - .env
    image: scraper-dash-fastapi
    container_name: scraper-dash-fastapi
    volumes: 
      - .:/app:z
      - /app/.venv
    depends_on:
      - redis
    ports:
      - 9000:80
    command: "/start"

  redis:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./docker/local/redis/Dockerfile
    image: scraper-dash-redis
    container_name: scraper-dash-redis

  celery-worker-main:
    <<: *server
    deploy:
      resources:
        limits:
          memory: 4G      # Leave 1GB for system
          cpus: '3.5'     # Leave 0.5 CPU for system
        reservations:
          memory: 2G
          cpus: '2'
    environment:
      - PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
    image: scraper-dash-celery-worker-main
    container_name: scraper-dash-celery-worker-main
    ports: []
    command: "/run-celery-worker-main"

  celery-worker-controller:
    <<: *server
    image: scraper-dash-celery-worker-controller
    container_name: scraper-dash-celery-worker-controller
    ports: []
    command: "/run-celery-worker-control"
    


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

