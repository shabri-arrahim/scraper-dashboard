# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server: &server
    build:
      context: .
      dockerfile: ./docker/production/Dockerfile
    env_file:
      - .env
    image: scraper-dash-fastapi
    container_name: scraper-dash-fastapi
    depends_on:
      - redis
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
    networks:
      - sd-network
    volumes:
      - ${HOME}/.scraper_dash:/app/sources
    command: /start

  redis:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./docker/production/redis/Dockerfile
    image: scraper-dash-redis
    container_name: scraper-dash-redis
    networks:
      - sd-network

  celery-worker-main:
    <<: *server
    deploy:
      resources:
        limits:
          memory: 4G      # Leave 1GB for system
          cpus: '3.5'     # Leave 0.5 CPU for system
        reservations:
          memory: 2G
          cpus: '2'
    environment:
      - PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
    image: scraper-dash-celery-worker-main
    container_name: scraper-dash-celery-worker-main
    ports: []
    command: "/run-celery-worker-main"

  # celery-worker-controller:
  #   <<: *server
  #   image: scraper-dash-celery-worker-controller
  #   container_name: scraper-dash-celery-worker-controller
  #   ports: []
  #   command: "/run-celery-worker-control"

networks:
  sd-network:
    driver: bridge
